import math
import warnings

import torch
import torch.nn as nn

def tile_elem(n_repeats, tensor_lst):
    if n_repeats == 1:
        return tensor_lst
    res = []
    for data in tensor_lst:
        data = data.unsqueeze(1).expand(data.size(0), n_repeats, *data.shape[1:]).contiguous().view(data.size(0) * n_repeats, *data.shape[1:])
        res.append(data)
    return res

def irregular_tile_elem(n_repeats_lst, tensor_lst):
    indices = []
    for idx, n_repeats in enumerate(n_repeats_lst):
        indices.extend([idx] * n_repeats)
    res = []
    for data in tensor_lst:
        res.append(data[indices])
    return res

def first_index_of(tensor, value, keepdim=False):
    '''^value^ should be contained in tensor, called when there exists more than one ^value^ in some line of tensor
    *   Arguments:
        *   tensor (torch.Tensor): two dimensional
    *   Returns:
        *   the index of the first occurrence of value
    '''
    return torch.argmax(torch.cumsum(torch.cumsum(tensor.eq(value).long(), 1), 1).eq(1).long(), 1, keepdim=keepdim)

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value

    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)
